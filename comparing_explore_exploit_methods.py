import numpy as np
import matplotlib.pyplot as plt
from comparing_epsilons import Bandit
from optimistic_initial_values import run_experiment as run_experiment_oiv
from ucb1 import run_experiment as run_experiment_ucb


class BayesianBandit(object):
    def __init__(self, m):
        self.m = m
        # Parameters for mu - prior is N(0,1)
        self.m0 = 0
        self.lambda0 = 1
        self.sum_x = 0
        self.tau = 1

    def pull(self):
        return np.random.randn() + self.m
    
    def sample(self):
        return np.random.randn() / np.sqrt(self.lambda0) + self.m0
    
    def update(self, x):
        self.lambda0 += 1
        self.sum_x += x
        self.m0 = (self.tau * self.sum_x) / self.lambda0


def run_experiment_decaying_eps(m1, m2, m3, N):
    bandits = [Bandit(m1), Bandit(m2), Bandit(m3)]

    data = np.empty(N)

    for i in range(N):
        # Epsilon greedy
        p = np.random.random()
        if p < 1./(i+1):
            selection = np.random.choice(3)
        else:
            selection = np.argmax([bandit.mean for bandit in bandits])
        # Pull from bandit and update sample mean
        x = bandits[selection].pull()
        bandits[selection].update(x)

        data[i] = x

    cumulative_avg = np.cumsum(data) / (np.arange(N) + 1)

    plt.plot(cumulative_avg)
    plt.plot(np.ones(N) * m1)
    plt.plot(np.ones(N) * m2)
    plt.plot(np.ones(N) * m3)
    plt.xscale('log')
    plt.show()

    # Print our esimate of each bandits mean and their actual mean
    print('Estimate of mean    Actual mean')
    for bandit in bandits:
        print('{:<20}{}'.format(bandit.mean, bandit.m))

    return cumulative_avg


def run_experiment_bayesian_sampling(m1, m2, m3, N):
    bandits = [BayesianBandit(m1), BayesianBandit(m2), BayesianBandit(m3)]

    data = np.empty(N)

    for i in range(N):
        selection = np.argmax([bandit.sample() for bandit in bandits])

        # Pull from bandit and update sample mean
        x = bandits[selection].pull()
        bandits[selection].update(x)

        data[i] = x

    cumulative_avg = np.cumsum(data) / (np.arange(N) + 1)

    plt.plot(cumulative_avg)
    plt.plot(np.ones(N) * m1)
    plt.plot(np.ones(N) * m2)
    plt.plot(np.ones(N) * m3)
    plt.xscale('log')
    plt.show()

    return cumulative_avg


if __name__ == '__main__':
    m1, m2, m3 = 1.0, 2.0, 3.0
    N = 100000
    eps = run_experiment_decaying_eps(m1, m2, m3, N)
    oiv = run_experiment_oiv(m1, m2, m3, N, 10)
    ucb = run_experiment_ucb(m1, m2, m3, N)
    bayes = run_experiment_bayesian_sampling(m1, m2, m3, N)

    # Log scale plot
    plt.plot(eps, label='Decaying Epsilon Greedy')
    plt.plot(oiv, label='Optimistic')
    plt.plot(ucb, label='UCB1')
    plt.plot(bayes, label='Bayesian')
    plt.legend()
    plt.xscale('log')
    plt.show()

    # Linear plot
    plt.plot(eps, label='Decaying Epsilon Greedy')
    plt.plot(oiv, label='Optimistic')
    plt.plot(ucb, label='UCB1')
    plt.plot(bayes, label='Bayesian')
    plt.legend()
    plt.show()
